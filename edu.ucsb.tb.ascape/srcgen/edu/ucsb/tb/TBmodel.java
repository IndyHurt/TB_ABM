package edu.ucsb.tb;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Singleton;
import org.ascape.model.space.Location;
import org.ascape.util.Conditional;

/**
 * <!-- begin-user-doc -->
 * TBmodel Java Implementation.
 * This model is investigates the dynamics of tuberculosis disease transmission within a population.
 * Generated by AMF for model: TBmodel.metaabm in project: edu.ucsb.tb.ascape 
 * <!-- end-user-doc -->
 * @generated
 */
public class TBmodel extends Scape {

	/**
	 * <!-- begin-user-doc -->
	 * The number of individuals to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int individualCount = 1000;
	/**
	 * <!-- begin-user-doc -->
	 * Individuals that have been infected with the TB bacillus but are not currently infectious (not w/ active TB).
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pInitialTBPositive = .3;
	/**
	 * <!-- begin-user-doc -->
	 * The probability that a given individual is in the active stage given that they are TB positive.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pInitialActive = .2;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int minDaysClinicalTreatmenttoRecovered = 175;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pTransmission = .001;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pDetection = .05;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int minDaysClinicalTreatmenttoLatent = 12;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int maxDaysClinicalTreatmenttoLatent = 16;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int maxDaysClinicalTreatmenttoRecovered = 185;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pFemale = 0.498374422;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double[] ageDistributionFemale = {0.162608312, 0.147915583,
			0.113257637, 0.100629927, 0.097086767, 0.090447583, 0.076451235,
			0.055016226, 0.041937109, 0.033182086, 0.024994817, 0.018708896,
			0.037763823};
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double[] ageDistributionMale = {0.161184175, 0.146690633,
			0.112438585, 0.100090123, 0.096109558, 0.08958423, 0.072958262,
			0.050453954, 0.039608665, 0.034161275, 0.028156401, 0.022416222,
			0.046147917};
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double[] hIVPrevalenceFemalebyAgeIndex = {0, 0.00, 0.00, 0.027,
			0.064, 0.104, 0.11, 0.088, 0.143, 0.064, 0.00, 0.00, 0.00};
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double[] hIVPrevalenceMalebyAgeIndex = {0, 0.00, 0.00, 0.007,
			0.015, 0.065, 0.068, 0.104, 0.057, 0.043, 0.00, 0.00, 0.00};
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double[] smokingPrevelanceMalebyAgeIndex = {0, 0, 0, 0.027, 0.151,
			0.201, 0.255, 0.245, 0.259, 0.296, 0.296, 0.296, 0.296};
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int periodsinYear = 365;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pAlwaysCompliantCategory = .7;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pSometimesCompliantCategory = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pSomtimesCompliantwillComply = .8;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double tBActiveDeathRateperYear = .2;
	/**
	 * <!-- begin-user-doc -->
	 * The number of houses to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int houseCount = 100;
	/**
	 * <!-- begin-user-doc -->
	 * The number of work locations to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int workLocationCount = 25;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double bacterialDecayRate = .03;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double bacterialDiffusionRate = .2;
	/**
	 * <!-- begin-user-doc -->
	 * The rate at which an active individual produces active bacterial cells into the surrounding environment.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double bacterialEmissionRate = .8;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int avoidTBLocations = 1;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pInitialImpoverished = .45;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pInitialMalnourished = .075;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pActiveTransitionLatentFactorBase = .02;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pActiveTransitionLatentHIVNegativeFactor = .0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pActiveTransitionLatentHIVPositiveFactor = 0.11;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pActiveTransitionLatentNonSmokerFactor = .0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pActiveTransitionLatentSmokerFactor = 0.04;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pActiveTransitionLatentNourishedFactor = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pActiveTransitionLatentMalnourishedFactor = .04;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pActiveTransitionLatentNotImprovishedFactor = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pActiveTransitionLatentImpoverishedFactor = .04;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double activeBacterialTransmissionRate = 12;
	/**
	 * <!-- begin-user-doc -->
	 * The level of bacterial load that will cause an individual to be considered as having (latent) TB. At this point, the individual will be serum positive.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int bacterialLoadInfectionThreshold = 10;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double immuneClearingFactorBase = 9;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double immuneClearingHIVNegativeFactor = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double immuneClearingHIVPositiveFactor = -3;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double immuneClearingNonSmokerFactor = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double immuneClearingSmokerFactor = -2;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double immuneClearingNourishedFactor = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double immuneClearingMalnourishedFactor = -2;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double immuneClearingNotImprovishedFactor = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double immuneClearingImpoverishedFactor = -2;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int periodsinDay = 24;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int maximumSeperation = 100;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double pHighSocialStatus = 0.08;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int nextHouseID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int nextWorkID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private String modelName = "";
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double hIVPrevalenceFemalebyAgeFactor = 1.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double hIVPrevalenceMalebyAgeFactor = 1.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double smokingPrevelanceMalebyAgeFactor = 1.0;
	/**
	 * <!-- begin-user-doc -->
	 * The horizontal extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int villageWidth = 100;
	/**
	 * <!-- begin-user-doc -->
	 * The vertical extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int villageHeight = 130;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private Scape village = null;

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new TBmodel.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TBmodel() {
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			TBmodel clone = (TBmodel) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	org.ascape.model.Scape houseScape;
	org.ascape.model.Scape workLocationScape;
	org.ascape.model.Scape individualScape;

	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of House that will be used to populate the houseScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected House createHousePrototype() {
		House house = new House();
		house.setCoordinate(new Coordinate2DDiscrete(0, 0));
		return house;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Work Location that will be used to populate the workLocationScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkLocation createWorkLocationPrototype() {
		WorkLocation workLocation = new WorkLocation();
		workLocation.setCoordinate(new Coordinate2DDiscrete(0, 0));
		return workLocation;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Individual that will be used to populate the individualScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Individual createIndividualPrototype() {
		Individual individual = new Individual();
		individual.setCoordinate(new Coordinate2DDiscrete(0, 0));
		return individual;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	static int next_vm_id;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	int vm_unique_id;

	/**
	 * <!-- begin-user-doc -->
	 * Creates the members of TBmodel.
	 * <!-- end-user-doc --> 
	 * @generated
	 */
	public void createScape() {
		super.createScape();

		setName("TBmodel");
		//A manager scape provides rule execution and stat collection for itself.
		if (isRoot()) {
			Scape tBmodelManager = new Scape(new Singleton());
			add(tBmodelManager);
			tBmodelManager
					.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
							"TBmodel P Initial TB Positive") {
						private static final long serialVersionUID = 1L;
						public final double getValue(Object tBmodel) {
							return getPInitialTBPositive();
						}
					});

		}
		House houseProto = createHousePrototype();
		houseScape = new Scape();
		houseScape.setName("Houses");
		houseScape.setPrototypeAgent(houseProto);
		houseScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(houseProto);

		WorkLocation workLocationProto = createWorkLocationPrototype();
		workLocationScape = new Scape();
		workLocationScape.setName("Work Locations");
		workLocationScape.setPrototypeAgent(workLocationProto);
		workLocationScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(workLocationProto);

		Individual individualProto = createIndividualPrototype();
		individualScape = new Scape();
		individualScape.setName("Individuals");
		individualScape.setPrototypeAgent(individualProto);
		individualScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(individualProto);

		individualScape.setSize(getIndividualCount());
		houseScape.setSize(getHouseCount());
		workLocationScape.setSize(getWorkLocationCount());
		village = new Scape(new org.ascape.model.space.Array2DMoore());
		village.setExecutionOrder(Scape.RULE_ORDER);
		MapLocation protoMapLocation = new MapLocation();
		village.setPrototypeAgent(protoMapLocation);
		village.setExtent(new org.ascape.model.space.Coordinate2DDiscrete(
				getVillageWidth(), getVillageHeight()));

		village.setName("Villages");
		((CollectionSpace) village.getSpace()).setPeriodic(false);
		add(village);
		org.ascape.model.Scape mapLocationScape = village;
		createExtensions(protoMapLocation);

		add(houseScape);

		createExtensions(houseProto);

		add(workLocationScape);

		createExtensions(workLocationProto);

		add(individualScape);

		createExtensions(individualProto);

		individualProto.setHostScape(village);
		houseProto.setHostScape(village);
		workLocationProto.setHostScape(village);

		houseScape.addStatCollector(new org.ascape.util.data.StatCollectorCond(
				houseScape.getName() + " Population") {
			private static final long serialVersionUID = 1L;
			@SuppressWarnings("unused")
			public final boolean meetsCondition(Object object) {
				return true;
			}
		});

		createExtensions(houseProto);

		workLocationScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						workLocationScape.getName() + " Population") {
					private static final long serialVersionUID = 1L;
					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});

		createExtensions(workLocationProto);

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						individualScape.getName() + " Population") {
					private static final long serialVersionUID = 1L;
					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});
		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Suseptible TB Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return TBStatusEnum.suseptible == ((Individual) individual)
								.getTBStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Latent TB Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return TBStatusEnum.latent == ((Individual) individual)
								.getTBStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Active TB Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return TBStatusEnum.active == ((Individual) individual)
								.getTBStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Dead TB Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return TBStatusEnum.dead == ((Individual) individual)
								.getTBStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Individual TB Infections Per Lifetime") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object individual) {
						return ((Individual) individual)
								.getTBInfectionsPerLifetime();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Not Infected Treatment Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return TreatmentStatusEnum.notInfected == ((Individual) individual)
								.getTreatmentStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual No Treatment Treatment Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return TreatmentStatusEnum.noTreatment == ((Individual) individual)
								.getTreatmentStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Local Healer Treatment Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return TreatmentStatusEnum.localHealer == ((Individual) individual)
								.getTreatmentStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Clinical Treatment Treatment Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return TreatmentStatusEnum.clinicalTreatment == ((Individual) individual)
								.getTreatmentStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Non Compliant Clinical Treatment Treatment Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return TreatmentStatusEnum.nonCompliantClinicalTreatment == ((Individual) individual)
								.getTreatmentStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual DOTS Treatment Treatment Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return TreatmentStatusEnum.dOTSTreatment == ((Individual) individual)
								.getTreatmentStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Non Compliant DOTS Treatment Treatment Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return TreatmentStatusEnum.nonCompliantDOTSTreatment == ((Individual) individual)
								.getTreatmentStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Individual Days Until Latent") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object individual) {
						return ((Individual) individual).getDaysUntilLatent();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Individual Days Until Recovered") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object individual) {
						return ((Individual) individual)
								.getDaysUntilRecovered();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Individual Succesful Treatments") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object individual) {
						return ((Individual) individual)
								.getSuccesfulTreatments();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual HIV Negative HIV Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return HIVStatusEnum.hIVNegative == ((Individual) individual)
								.getHIVStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual HIV Positive HIV Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return HIVStatusEnum.hIVPositive == ((Individual) individual)
								.getHIVStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Non Smoker Smoking") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return SmokingEnum.nonSmoker == ((Individual) individual)
								.getSmoking();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Smoker Smoking") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return SmokingEnum.smoker == ((Individual) individual)
								.getSmoking();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Female Gender") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return GenderEnum.female == ((Individual) individual)
								.getGender();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Male Gender") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return GenderEnum.male == ((Individual) individual)
								.getGender();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Individual Age Index") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object individual) {
						return ((Individual) individual).getAgeIndex();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Individual Age Range") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object individual) {
						return ((Individual) individual).getAgeRange();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Never Compliant Compliance Behavior") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return ComplianceBehaviorEnum.neverCompliant == ((Individual) individual)
								.getComplianceBehavior();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Sometimes Compliant Compliance Behavior") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return ComplianceBehaviorEnum.sometimesCompliant == ((Individual) individual)
								.getComplianceBehavior();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Always Compliant Compliance Behavior") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return ComplianceBehaviorEnum.alwaysCompliant == ((Individual) individual)
								.getComplianceBehavior();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Individual Bacterial Load") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object individual) {
						return ((Individual) individual).getBacterialLoad();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Nourished Nutrition") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return NutritionEnum.nourished == ((Individual) individual)
								.getNutrition();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Malnourished Nutrition") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return NutritionEnum.malnourished == ((Individual) individual)
								.getNutrition();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Not Improvished Economic Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return EconomicStatusEnum.notImprovished == ((Individual) individual)
								.getEconomicStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Individual Impoverished Economic Status") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object individual) {
						return EconomicStatusEnum.impoverished == ((Individual) individual)
								.getEconomicStatus();
					}
				});

		individualScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Individual Bacterial Clearing Rate") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object individual) {
						return ((Individual) individual)
								.getBacterialClearingRate();
					}
				});

		createExtensions(individualProto);

		houseScape.addInitialRule(new Rule("Initialize") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.House) a).intializeNonFramework();
			}
		});

		workLocationScape.addInitialRule(new Rule("Initialize") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.WorkLocation) a).intializeNonFramework();
			}
		});

		individualScape.addInitialRule(new Rule("Initial Placement") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.Individual) a).initialPlacement();
			}
		});

		individualScape.addInitialRule(new Rule("Initialize State") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.Individual) a).initializeState();
			}
		});
		individualScape.addRule(new Rule("Individual Rule") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.Individual) a).individualRule();
			}
		});
		individualScape.addRule(new Rule("Movement") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.Individual) a).movement();
			}
		});
		individualScape.addRule(new Rule("Avoidance") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.Individual) a).avoidance();
			}
		});
		individualScape.addRule(new Rule("Disease Process") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.Individual) a).diseaseProcess();
			}
		});
		individualScape.addRule(new Rule("Detection") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.Individual) a).detection();
			}
		});
		individualScape.addRule(new Rule("Immune Response") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.Individual) a).immuneResponse();
			}
		});
		individualScape.addRule(new Rule("Death Process") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.Individual) a).deathProcess();
			}
		});
		individualScape.addRule(new Rule("Transmit") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.Individual) a).transmit();
			}
		});
		mapLocationScape.addRule(new Rule("Map Location Rule") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.ucsb.tb.MapLocation) a).mapLocationRule();
			}
		});
		createExtensions(this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * Creates UI views for TBmodel.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void createGraphicViews() {
		super.createGraphicViews();
		{
			org.ascape.view.vis.Overhead2DView villageView = new org.ascape.view.vis.Overhead2DView();
			villageView.setAgentSize(3);
			village.addView(villageView);
			org.ascape.util.vis.DrawFeature mapLocationStyle2D = new edu.ucsb.tb.MapLocationStyle2D();
			mapLocationStyle2D.setName("Map Location Style 2D");
			village.addDrawFeature(mapLocationStyle2D);
			org.ascape.util.vis.DrawFeature individualStyle2D = new edu.ucsb.tb.IndividualStyle2D();
			individualStyle2D.setName("Individual Style 2D");
			village.addDrawFeature(individualStyle2D);
			org.ascape.util.vis.DrawFeature houseStyle2D = new edu.ucsb.tb.HouseStyle2D();
			houseStyle2D.setName("House Style 2D");
			village.addDrawFeature(houseStyle2D);
			org.ascape.util.vis.DrawFeature workLocationStyle2D = new edu.ucsb.tb.WorkLocationStyle2D();
			workLocationStyle2D.setName("Work Location Style 2D");
			village.addDrawFeature(workLocationStyle2D);
			villageView.getDrawSelection().setSelected(individualStyle2D, true);
			villageView.getDrawSelection().setSelected(houseStyle2D, true);
			villageView.getDrawSelection().setSelected(workLocationStyle2D,
					true);
			villageView.getDrawSelection()
					.setSelected(mapLocationStyle2D, true);
			villageView.getDrawSelection().setSelected(
					villageView.agents_oval_cells_draw_feature, false);
			villageView.getDrawSelection().setSelected(
					villageView.cells_fill_draw_feature, true);
			villageView.getDrawSelection().moveToFront(
					villageView.cells_fill_draw_feature);
		}
		{
			org.ascape.view.vis.ChartView chart = new org.ascape.view.vis.ChartView();
			addView(chart);
			//if (getRunner().getEnvironment() instanceof org.ascape.runtime.applet.AppletEnvironment) {
			//    chart.getChart().getLegend().setAnchor(com.jrefinery.chart.Legend.SOUTH);
			//}
			Graphics dummyGraphics = new BufferedImage(10, 10,
					BufferedImage.TYPE_INT_RGB).getGraphics();

			final TBmodel houseScape = new TBmodel();
			houseScape.setRunner(new org.ascape.runtime.NonGraphicRunner());
			House house = new House() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public TBmodel getTBmodel() {
					return houseScape;
				}
			};
			houseScape.add(house);
			org.ascape.model.HostCell houseHost = new org.ascape.model.HostCell() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}
			};
			houseHost.setOccupant((org.ascape.model.CellOccupant) house);

			HouseStyle2D houseStyle2D = new HouseStyle2D();

			final TBmodel workLocationScape = new TBmodel();
			workLocationScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			WorkLocation workLocation = new WorkLocation() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public TBmodel getTBmodel() {
					return workLocationScape;
				}
			};
			workLocationScape.add(workLocation);
			org.ascape.model.HostCell workLocationHost = new org.ascape.model.HostCell() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}
			};
			workLocationHost
					.setOccupant((org.ascape.model.CellOccupant) workLocation);

			WorkLocationStyle2D workLocationStyle2D = new WorkLocationStyle2D();

			final TBmodel individualScape = new TBmodel();
			individualScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			Individual individual = new Individual() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public TBmodel getTBmodel() {
					return individualScape;
				}
			};
			individualScape.add(individual);
			org.ascape.model.HostCell individualHost = new org.ascape.model.HostCell() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}
			};
			individualHost
					.setOccupant((org.ascape.model.CellOccupant) individual);

			IndividualStyle2D individualStyle2D = new IndividualStyle2D();

			individual.setTBStatus(TBStatusEnum.suseptible);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual Suseptible TB Status",
						agentColor);
			}

			individual.setTBStatus(TBStatusEnum.latent);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual Latent TB Status", agentColor);
			}

			individual.setTBStatus(TBStatusEnum.active);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual Active TB Status", agentColor);
			}

			individual.setTBStatus(TBStatusEnum.dead);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual Dead TB Status", agentColor);
			}

			individual.setTreatmentStatus(TreatmentStatusEnum.notInfected);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual Not Infected Treatment Status",
						agentColor);
			}

			individual.setTreatmentStatus(TreatmentStatusEnum.noTreatment);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual No Treatment Treatment Status",
						agentColor);
			}

			individual.setTreatmentStatus(TreatmentStatusEnum.localHealer);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual Local Healer Treatment Status",
						agentColor);
			}

			individual
					.setTreatmentStatus(TreatmentStatusEnum.clinicalTreatment);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual Clinical Treatment Treatment Status",
						agentColor);
			}

			individual
					.setTreatmentStatus(TreatmentStatusEnum.nonCompliantClinicalTreatment);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual Non Compliant Clinical Treatment Treatment Status",
						agentColor);
			}

			individual.setTreatmentStatus(TreatmentStatusEnum.dOTSTreatment);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual DOTS Treatment Treatment Status",
						agentColor);
			}

			individual
					.setTreatmentStatus(TreatmentStatusEnum.nonCompliantDOTSTreatment);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual Non Compliant DOTS Treatment Treatment Status",
						agentColor);
			}

			individual.setHIVStatus(HIVStatusEnum.hIVNegative);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual HIV Negative HIV Status",
						agentColor);
			}

			individual.setHIVStatus(HIVStatusEnum.hIVPositive);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual HIV Positive HIV Status",
						agentColor);
			}

			individual.setSmoking(SmokingEnum.nonSmoker);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual Non Smoker Smoking",
						agentColor);
			}

			individual.setSmoking(SmokingEnum.smoker);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual Smoker Smoking", agentColor);
			}

			individual.setGender(GenderEnum.female);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual Female Gender", agentColor);
			}

			individual.setGender(GenderEnum.male);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual Male Gender", agentColor);
			}

			individual
					.setComplianceBehavior(ComplianceBehaviorEnum.neverCompliant);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual Never Compliant Compliance Behavior",
						agentColor);
			}

			individual
					.setComplianceBehavior(ComplianceBehaviorEnum.sometimesCompliant);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual Sometimes Compliant Compliance Behavior",
						agentColor);
			}

			individual
					.setComplianceBehavior(ComplianceBehaviorEnum.alwaysCompliant);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual Always Compliant Compliance Behavior",
						agentColor);
			}

			individual.setNutrition(NutritionEnum.nourished);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual Nourished Nutrition",
						agentColor);
			}

			individual.setNutrition(NutritionEnum.malnourished);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Individual Malnourished Nutrition",
						agentColor);
			}

			individual.setEconomicStatus(EconomicStatusEnum.notImprovished);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual Not Improvished Economic Status",
						agentColor);
			}

			individual.setEconomicStatus(EconomicStatusEnum.impoverished);

			individualStyle2D.draw(dummyGraphics, individualHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries(
						"Count Individual Impoverished Economic Status",
						agentColor);
			}

			final TBmodel mapLocationScape = new TBmodel();
			mapLocationScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			MapLocation mapLocation = new MapLocation() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public TBmodel getTBmodel() {
					return mapLocationScape;
				}
			};
			mapLocationScape.add(mapLocation);

			MapLocationStyle2D mapLocationStyle2D = new MapLocationStyle2D();
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void scapeSetup(ScapeEvent scapeEvent) {
		//Set the size of the scape populations, e.g. for mutable scapes that need to have their size reset

		individualScape.setSize(getIndividualCount());
		houseScape.setSize(getHouseCount());
		workLocationScape.setSize(getWorkLocationCount());
	}

	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Houses.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getHouseScape() {
		return houseScape;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Work Locations.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getWorkLocationScape() {
		return workLocationScape;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Individuals.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getIndividualScape() {
		return individualScape;
	}

	public void createExtensions(Object object) {
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static void main(String[] args) {
		(new org.ascape.runtime.swing.SwingRunner()).open(
				"edu.ucsb.tb.TBmodel", args);
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Color getColor() {
		return Color.LIGHT_GRAY;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Individual Count property for TBmodel.
	 * @return The number of individuals to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getIndividualCount() {
		return individualCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Individual Count property for TBmodel.
	 * The number of individuals to create.
	 * @param _individualCount the new Individual Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setIndividualCount(int _individualCount) {
		individualCount = _individualCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Initial TB Positive property for TBmodel.
	 * @return Individuals that have been infected with the TB bacillus but are not currently infectious (not w/ active TB).
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPInitialTBPositive() {
		return pInitialTBPositive;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Initial TB Positive property for TBmodel.
	 * Individuals that have been infected with the TB bacillus but are not currently infectious (not w/ active TB).
	 * @param _pInitialTBPositive the new P Initial TB Positive value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPInitialTBPositive(double _pInitialTBPositive) {
		pInitialTBPositive = _pInitialTBPositive;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Initial Active property for TBmodel.
	 * @return The probability that a given individual is in the active stage given that they are TB positive.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPInitialActive() {
		return pInitialActive;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Initial Active property for TBmodel.
	 * The probability that a given individual is in the active stage given that they are TB positive.
	 * @param _pInitialActive the new P Initial Active value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPInitialActive(double _pInitialActive) {
		pInitialActive = _pInitialActive;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Min Days Clinical Treatment to Recovered property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getMinDaysClinicalTreatmenttoRecovered() {
		return minDaysClinicalTreatmenttoRecovered;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Min Days Clinical Treatment to Recovered property for TBmodel.
	 * 
	 * @param _minDaysClinicalTreatmenttoRecovered the new Min Days Clinical Treatment to Recovered value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setMinDaysClinicalTreatmenttoRecovered(
			int _minDaysClinicalTreatmenttoRecovered) {
		minDaysClinicalTreatmenttoRecovered = _minDaysClinicalTreatmenttoRecovered;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Transmission property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPTransmission() {
		return pTransmission;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Transmission property for TBmodel.
	 * 
	 * @param _pTransmission the new P Transmission value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPTransmission(double _pTransmission) {
		pTransmission = _pTransmission;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Detection property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPDetection() {
		return pDetection;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Detection property for TBmodel.
	 * 
	 * @param _pDetection the new P Detection value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPDetection(double _pDetection) {
		pDetection = _pDetection;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Min Days Clinical Treatment to Latent property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getMinDaysClinicalTreatmenttoLatent() {
		return minDaysClinicalTreatmenttoLatent;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Min Days Clinical Treatment to Latent property for TBmodel.
	 * 
	 * @param _minDaysClinicalTreatmenttoLatent the new Min Days Clinical Treatment to Latent value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setMinDaysClinicalTreatmenttoLatent(
			int _minDaysClinicalTreatmenttoLatent) {
		minDaysClinicalTreatmenttoLatent = _minDaysClinicalTreatmenttoLatent;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Max Days Clinical Treatment to Latent property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getMaxDaysClinicalTreatmenttoLatent() {
		return maxDaysClinicalTreatmenttoLatent;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Max Days Clinical Treatment to Latent property for TBmodel.
	 * 
	 * @param _maxDaysClinicalTreatmenttoLatent the new Max Days Clinical Treatment to Latent value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setMaxDaysClinicalTreatmenttoLatent(
			int _maxDaysClinicalTreatmenttoLatent) {
		maxDaysClinicalTreatmenttoLatent = _maxDaysClinicalTreatmenttoLatent;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Max Days Clinical Treatment to Recovered property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getMaxDaysClinicalTreatmenttoRecovered() {
		return maxDaysClinicalTreatmenttoRecovered;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Max Days Clinical Treatment to Recovered property for TBmodel.
	 * 
	 * @param _maxDaysClinicalTreatmenttoRecovered the new Max Days Clinical Treatment to Recovered value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setMaxDaysClinicalTreatmenttoRecovered(
			int _maxDaysClinicalTreatmenttoRecovered) {
		maxDaysClinicalTreatmenttoRecovered = _maxDaysClinicalTreatmenttoRecovered;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Female property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPFemale() {
		return pFemale;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Female property for TBmodel.
	 * 
	 * @param _pFemale the new P Female value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPFemale(double _pFemale) {
		pFemale = _pFemale;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Age Distribution Female property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double[] getAgeDistributionFemale() {
		return ageDistributionFemale;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Age Distribution Female property for TBmodel.
	 * 
	 * @param _ageDistributionFemale the new Age Distribution Female value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setAgeDistributionFemale(double[] _ageDistributionFemale) {
		ageDistributionFemale = _ageDistributionFemale;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Age Distribution Male property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double[] getAgeDistributionMale() {
		return ageDistributionMale;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Age Distribution Male property for TBmodel.
	 * 
	 * @param _ageDistributionMale the new Age Distribution Male value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setAgeDistributionMale(double[] _ageDistributionMale) {
		ageDistributionMale = _ageDistributionMale;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the HIV Prevalence Female by Age Index property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double[] getHIVPrevalenceFemalebyAgeIndex() {
		return hIVPrevalenceFemalebyAgeIndex;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the HIV Prevalence Female by Age Index property for TBmodel.
	 * 
	 * @param _hIVPrevalenceFemalebyAgeIndex the new HIV Prevalence Female by Age Index value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHIVPrevalenceFemalebyAgeIndex(
			double[] _hIVPrevalenceFemalebyAgeIndex) {
		hIVPrevalenceFemalebyAgeIndex = _hIVPrevalenceFemalebyAgeIndex;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the HIV Prevalence Male by Age Index property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double[] getHIVPrevalenceMalebyAgeIndex() {
		return hIVPrevalenceMalebyAgeIndex;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the HIV Prevalence Male by Age Index property for TBmodel.
	 * 
	 * @param _hIVPrevalenceMalebyAgeIndex the new HIV Prevalence Male by Age Index value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHIVPrevalenceMalebyAgeIndex(
			double[] _hIVPrevalenceMalebyAgeIndex) {
		hIVPrevalenceMalebyAgeIndex = _hIVPrevalenceMalebyAgeIndex;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Smoking Prevelance Male by Age Index property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double[] getSmokingPrevelanceMalebyAgeIndex() {
		return smokingPrevelanceMalebyAgeIndex;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Smoking Prevelance Male by Age Index property for TBmodel.
	 * 
	 * @param _smokingPrevelanceMalebyAgeIndex the new Smoking Prevelance Male by Age Index value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSmokingPrevelanceMalebyAgeIndex(
			double[] _smokingPrevelanceMalebyAgeIndex) {
		smokingPrevelanceMalebyAgeIndex = _smokingPrevelanceMalebyAgeIndex;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Periods in Year property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getPeriodsinYear() {
		return periodsinYear;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Always Compliant Category property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPAlwaysCompliantCategory() {
		return pAlwaysCompliantCategory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Always Compliant Category property for TBmodel.
	 * 
	 * @param _pAlwaysCompliantCategory the new P Always Compliant Category value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPAlwaysCompliantCategory(double _pAlwaysCompliantCategory) {
		pAlwaysCompliantCategory = _pAlwaysCompliantCategory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Sometimes Compliant Category property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPSometimesCompliantCategory() {
		return pSometimesCompliantCategory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Sometimes Compliant Category property for TBmodel.
	 * 
	 * @param _pSometimesCompliantCategory the new P Sometimes Compliant Category value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPSometimesCompliantCategory(
			double _pSometimesCompliantCategory) {
		pSometimesCompliantCategory = _pSometimesCompliantCategory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Somtimes Compliant will Comply property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPSomtimesCompliantwillComply() {
		return pSomtimesCompliantwillComply;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Somtimes Compliant will Comply property for TBmodel.
	 * 
	 * @param _pSomtimesCompliantwillComply the new P Somtimes Compliant will Comply value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPSomtimesCompliantwillComply(
			double _pSomtimesCompliantwillComply) {
		pSomtimesCompliantwillComply = _pSomtimesCompliantwillComply;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the TB Active Death Rate per Year property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getTBActiveDeathRateperYear() {
		return tBActiveDeathRateperYear;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the TB Active Death Rate per Year property for TBmodel.
	 * 
	 * @param _tBActiveDeathRateperYear the new TB Active Death Rate per Year value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTBActiveDeathRateperYear(double _tBActiveDeathRateperYear) {
		tBActiveDeathRateperYear = _tBActiveDeathRateperYear;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the House Count property for TBmodel.
	 * @return The number of houses to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getHouseCount() {
		return houseCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the House Count property for TBmodel.
	 * The number of houses to create.
	 * @param _houseCount the new House Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHouseCount(int _houseCount) {
		houseCount = _houseCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Work Location Count property for TBmodel.
	 * @return The number of work locations to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getWorkLocationCount() {
		return workLocationCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Work Location Count property for TBmodel.
	 * The number of work locations to create.
	 * @param _workLocationCount the new Work Location Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setWorkLocationCount(int _workLocationCount) {
		workLocationCount = _workLocationCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Bacterial Decay Rate property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getBacterialDecayRate() {
		return bacterialDecayRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Bacterial Decay Rate property for TBmodel.
	 * 
	 * @param _bacterialDecayRate the new Bacterial Decay Rate value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setBacterialDecayRate(double _bacterialDecayRate) {
		bacterialDecayRate = _bacterialDecayRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Bacterial Diffusion Rate property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getBacterialDiffusionRate() {
		return bacterialDiffusionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Bacterial Diffusion Rate property for TBmodel.
	 * 
	 * @param _bacterialDiffusionRate the new Bacterial Diffusion Rate value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setBacterialDiffusionRate(double _bacterialDiffusionRate) {
		bacterialDiffusionRate = _bacterialDiffusionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Bacterial Emission Rate property for TBmodel.
	 * @return The rate at which an active individual produces active bacterial cells into the surrounding environment.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getBacterialEmissionRate() {
		return bacterialEmissionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Bacterial Emission Rate property for TBmodel.
	 * The rate at which an active individual produces active bacterial cells into the surrounding environment.
	 * @param _bacterialEmissionRate the new Bacterial Emission Rate value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setBacterialEmissionRate(double _bacterialEmissionRate) {
		bacterialEmissionRate = _bacterialEmissionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Avoid TB Locations property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getAvoidTBLocations() {
		return avoidTBLocations;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Avoid TB Locations property for TBmodel.
	 * 
	 * @param _avoidTBLocations the new Avoid TB Locations value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setAvoidTBLocations(int _avoidTBLocations) {
		avoidTBLocations = _avoidTBLocations;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Initial Impoverished property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPInitialImpoverished() {
		return pInitialImpoverished;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Initial Impoverished property for TBmodel.
	 * 
	 * @param _pInitialImpoverished the new P Initial Impoverished value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPInitialImpoverished(double _pInitialImpoverished) {
		pInitialImpoverished = _pInitialImpoverished;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Initial Malnourished property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPInitialMalnourished() {
		return pInitialMalnourished;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Initial Malnourished property for TBmodel.
	 * 
	 * @param _pInitialMalnourished the new P Initial Malnourished value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPInitialMalnourished(double _pInitialMalnourished) {
		pInitialMalnourished = _pInitialMalnourished;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Active Transition Latent Factor Base property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPActiveTransitionLatentFactorBase() {
		return pActiveTransitionLatentFactorBase;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Active Transition Latent Factor Base property for TBmodel.
	 * 
	 * @param _pActiveTransitionLatentFactorBase the new P Active Transition Latent Factor Base value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPActiveTransitionLatentFactorBase(
			double _pActiveTransitionLatentFactorBase) {
		pActiveTransitionLatentFactorBase = _pActiveTransitionLatentFactorBase;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Active Transition Latent HIV Negative Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPActiveTransitionLatentHIVNegativeFactor() {
		return pActiveTransitionLatentHIVNegativeFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Active Transition Latent HIV Negative Factor property for TBmodel.
	 * 
	 * @param _pActiveTransitionLatentHIVNegativeFactor the new P Active Transition Latent HIV Negative Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPActiveTransitionLatentHIVNegativeFactor(
			double _pActiveTransitionLatentHIVNegativeFactor) {
		pActiveTransitionLatentHIVNegativeFactor = _pActiveTransitionLatentHIVNegativeFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Active Transition Latent HIV Positive Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPActiveTransitionLatentHIVPositiveFactor() {
		return pActiveTransitionLatentHIVPositiveFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Active Transition Latent HIV Positive Factor property for TBmodel.
	 * 
	 * @param _pActiveTransitionLatentHIVPositiveFactor the new P Active Transition Latent HIV Positive Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPActiveTransitionLatentHIVPositiveFactor(
			double _pActiveTransitionLatentHIVPositiveFactor) {
		pActiveTransitionLatentHIVPositiveFactor = _pActiveTransitionLatentHIVPositiveFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Active Transition Latent Non Smoker Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPActiveTransitionLatentNonSmokerFactor() {
		return pActiveTransitionLatentNonSmokerFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Active Transition Latent Non Smoker Factor property for TBmodel.
	 * 
	 * @param _pActiveTransitionLatentNonSmokerFactor the new P Active Transition Latent Non Smoker Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPActiveTransitionLatentNonSmokerFactor(
			double _pActiveTransitionLatentNonSmokerFactor) {
		pActiveTransitionLatentNonSmokerFactor = _pActiveTransitionLatentNonSmokerFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Active Transition Latent Smoker Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPActiveTransitionLatentSmokerFactor() {
		return pActiveTransitionLatentSmokerFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Active Transition Latent Smoker Factor property for TBmodel.
	 * 
	 * @param _pActiveTransitionLatentSmokerFactor the new P Active Transition Latent Smoker Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPActiveTransitionLatentSmokerFactor(
			double _pActiveTransitionLatentSmokerFactor) {
		pActiveTransitionLatentSmokerFactor = _pActiveTransitionLatentSmokerFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Active Transition Latent Nourished Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPActiveTransitionLatentNourishedFactor() {
		return pActiveTransitionLatentNourishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Active Transition Latent Nourished Factor property for TBmodel.
	 * 
	 * @param _pActiveTransitionLatentNourishedFactor the new P Active Transition Latent Nourished Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPActiveTransitionLatentNourishedFactor(
			double _pActiveTransitionLatentNourishedFactor) {
		pActiveTransitionLatentNourishedFactor = _pActiveTransitionLatentNourishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Active Transition Latent Malnourished Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPActiveTransitionLatentMalnourishedFactor() {
		return pActiveTransitionLatentMalnourishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Active Transition Latent Malnourished Factor property for TBmodel.
	 * 
	 * @param _pActiveTransitionLatentMalnourishedFactor the new P Active Transition Latent Malnourished Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPActiveTransitionLatentMalnourishedFactor(
			double _pActiveTransitionLatentMalnourishedFactor) {
		pActiveTransitionLatentMalnourishedFactor = _pActiveTransitionLatentMalnourishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Active Transition Latent Not Improvished Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPActiveTransitionLatentNotImprovishedFactor() {
		return pActiveTransitionLatentNotImprovishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Active Transition Latent Not Improvished Factor property for TBmodel.
	 * 
	 * @param _pActiveTransitionLatentNotImprovishedFactor the new P Active Transition Latent Not Improvished Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPActiveTransitionLatentNotImprovishedFactor(
			double _pActiveTransitionLatentNotImprovishedFactor) {
		pActiveTransitionLatentNotImprovishedFactor = _pActiveTransitionLatentNotImprovishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P Active Transition Latent Impoverished Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPActiveTransitionLatentImpoverishedFactor() {
		return pActiveTransitionLatentImpoverishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P Active Transition Latent Impoverished Factor property for TBmodel.
	 * 
	 * @param _pActiveTransitionLatentImpoverishedFactor the new P Active Transition Latent Impoverished Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPActiveTransitionLatentImpoverishedFactor(
			double _pActiveTransitionLatentImpoverishedFactor) {
		pActiveTransitionLatentImpoverishedFactor = _pActiveTransitionLatentImpoverishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Active Bacterial Transmission Rate property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getActiveBacterialTransmissionRate() {
		return activeBacterialTransmissionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Active Bacterial Transmission Rate property for TBmodel.
	 * 
	 * @param _activeBacterialTransmissionRate the new Active Bacterial Transmission Rate value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setActiveBacterialTransmissionRate(
			double _activeBacterialTransmissionRate) {
		activeBacterialTransmissionRate = _activeBacterialTransmissionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Bacterial Load Infection Threshold property for TBmodel.
	 * @return The level of bacterial load that will cause an individual to be considered as having (latent) TB. At this point, the individual will be serum positive.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getBacterialLoadInfectionThreshold() {
		return bacterialLoadInfectionThreshold;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Bacterial Load Infection Threshold property for TBmodel.
	 * The level of bacterial load that will cause an individual to be considered as having (latent) TB. At this point, the individual will be serum positive.
	 * @param _bacterialLoadInfectionThreshold the new Bacterial Load Infection Threshold value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setBacterialLoadInfectionThreshold(
			int _bacterialLoadInfectionThreshold) {
		bacterialLoadInfectionThreshold = _bacterialLoadInfectionThreshold;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Immune Clearing Factor Base property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getImmuneClearingFactorBase() {
		return immuneClearingFactorBase;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Immune Clearing Factor Base property for TBmodel.
	 * 
	 * @param _immuneClearingFactorBase the new Immune Clearing Factor Base value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setImmuneClearingFactorBase(double _immuneClearingFactorBase) {
		immuneClearingFactorBase = _immuneClearingFactorBase;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Immune Clearing HIV Negative Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getImmuneClearingHIVNegativeFactor() {
		return immuneClearingHIVNegativeFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Immune Clearing HIV Negative Factor property for TBmodel.
	 * 
	 * @param _immuneClearingHIVNegativeFactor the new Immune Clearing HIV Negative Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setImmuneClearingHIVNegativeFactor(
			double _immuneClearingHIVNegativeFactor) {
		immuneClearingHIVNegativeFactor = _immuneClearingHIVNegativeFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Immune Clearing HIV Positive Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getImmuneClearingHIVPositiveFactor() {
		return immuneClearingHIVPositiveFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Immune Clearing HIV Positive Factor property for TBmodel.
	 * 
	 * @param _immuneClearingHIVPositiveFactor the new Immune Clearing HIV Positive Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setImmuneClearingHIVPositiveFactor(
			double _immuneClearingHIVPositiveFactor) {
		immuneClearingHIVPositiveFactor = _immuneClearingHIVPositiveFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Immune Clearing Non Smoker Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getImmuneClearingNonSmokerFactor() {
		return immuneClearingNonSmokerFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Immune Clearing Non Smoker Factor property for TBmodel.
	 * 
	 * @param _immuneClearingNonSmokerFactor the new Immune Clearing Non Smoker Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setImmuneClearingNonSmokerFactor(
			double _immuneClearingNonSmokerFactor) {
		immuneClearingNonSmokerFactor = _immuneClearingNonSmokerFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Immune Clearing Smoker Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getImmuneClearingSmokerFactor() {
		return immuneClearingSmokerFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Immune Clearing Smoker Factor property for TBmodel.
	 * 
	 * @param _immuneClearingSmokerFactor the new Immune Clearing Smoker Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setImmuneClearingSmokerFactor(double _immuneClearingSmokerFactor) {
		immuneClearingSmokerFactor = _immuneClearingSmokerFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Immune Clearing Nourished Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getImmuneClearingNourishedFactor() {
		return immuneClearingNourishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Immune Clearing Nourished Factor property for TBmodel.
	 * 
	 * @param _immuneClearingNourishedFactor the new Immune Clearing Nourished Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setImmuneClearingNourishedFactor(
			double _immuneClearingNourishedFactor) {
		immuneClearingNourishedFactor = _immuneClearingNourishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Immune Clearing Malnourished Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getImmuneClearingMalnourishedFactor() {
		return immuneClearingMalnourishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Immune Clearing Malnourished Factor property for TBmodel.
	 * 
	 * @param _immuneClearingMalnourishedFactor the new Immune Clearing Malnourished Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setImmuneClearingMalnourishedFactor(
			double _immuneClearingMalnourishedFactor) {
		immuneClearingMalnourishedFactor = _immuneClearingMalnourishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Immune Clearing Not Improvished Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getImmuneClearingNotImprovishedFactor() {
		return immuneClearingNotImprovishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Immune Clearing Not Improvished Factor property for TBmodel.
	 * 
	 * @param _immuneClearingNotImprovishedFactor the new Immune Clearing Not Improvished Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setImmuneClearingNotImprovishedFactor(
			double _immuneClearingNotImprovishedFactor) {
		immuneClearingNotImprovishedFactor = _immuneClearingNotImprovishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Immune Clearing Impoverished Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getImmuneClearingImpoverishedFactor() {
		return immuneClearingImpoverishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Immune Clearing Impoverished Factor property for TBmodel.
	 * 
	 * @param _immuneClearingImpoverishedFactor the new Immune Clearing Impoverished Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setImmuneClearingImpoverishedFactor(
			double _immuneClearingImpoverishedFactor) {
		immuneClearingImpoverishedFactor = _immuneClearingImpoverishedFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Periods in Day property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getPeriodsinDay() {
		return periodsinDay;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Periods in Day property for TBmodel.
	 * 
	 * @param _periodsinDay the new Periods in Day value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPeriodsinDay(int _periodsinDay) {
		periodsinDay = _periodsinDay;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Maximum Seperation property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getMaximumSeperation() {
		return maximumSeperation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Maximum Seperation property for TBmodel.
	 * 
	 * @param _maximumSeperation the new Maximum Seperation value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setMaximumSeperation(int _maximumSeperation) {
		maximumSeperation = _maximumSeperation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the P High Social Status property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getPHighSocialStatus() {
		return pHighSocialStatus;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the P High Social Status property for TBmodel.
	 * 
	 * @param _pHighSocialStatus the new P High Social Status value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setPHighSocialStatus(double _pHighSocialStatus) {
		pHighSocialStatus = _pHighSocialStatus;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Next House ID property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getNextHouseID() {
		return nextHouseID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Next House ID property for TBmodel.
	 * 
	 * @param _nextHouseID the new Next House ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNextHouseID(int _nextHouseID) {
		nextHouseID = _nextHouseID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Next Work ID property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getNextWorkID() {
		return nextWorkID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Next Work ID property for TBmodel.
	 * 
	 * @param _nextWorkID the new Next Work ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNextWorkID(int _nextWorkID) {
		nextWorkID = _nextWorkID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Model Name property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getModelName() {
		return modelName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Model Name property for TBmodel.
	 * 
	 * @param _modelName the new Model Name value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setModelName(String _modelName) {
		modelName = _modelName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the HIV Prevalence Female by Age Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getHIVPrevalenceFemalebyAgeFactor() {
		return hIVPrevalenceFemalebyAgeFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the HIV Prevalence Female by Age Factor property for TBmodel.
	 * 
	 * @param _hIVPrevalenceFemalebyAgeFactor the new HIV Prevalence Female by Age Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHIVPrevalenceFemalebyAgeFactor(
			double _hIVPrevalenceFemalebyAgeFactor) {
		hIVPrevalenceFemalebyAgeFactor = _hIVPrevalenceFemalebyAgeFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the HIV Prevalence Male by Age Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getHIVPrevalenceMalebyAgeFactor() {
		return hIVPrevalenceMalebyAgeFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the HIV Prevalence Male by Age Factor property for TBmodel.
	 * 
	 * @param _hIVPrevalenceMalebyAgeFactor the new HIV Prevalence Male by Age Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHIVPrevalenceMalebyAgeFactor(
			double _hIVPrevalenceMalebyAgeFactor) {
		hIVPrevalenceMalebyAgeFactor = _hIVPrevalenceMalebyAgeFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Smoking Prevelance Male by Age Factor property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getSmokingPrevelanceMalebyAgeFactor() {
		return smokingPrevelanceMalebyAgeFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Smoking Prevelance Male by Age Factor property for TBmodel.
	 * 
	 * @param _smokingPrevelanceMalebyAgeFactor the new Smoking Prevelance Male by Age Factor value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSmokingPrevelanceMalebyAgeFactor(
			double _smokingPrevelanceMalebyAgeFactor) {
		smokingPrevelanceMalebyAgeFactor = _smokingPrevelanceMalebyAgeFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Width property for Village.
	 * @return The horizontal extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getVillageWidth() {
		return villageWidth;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Width property for Village.
	 * The horizontal extent of the space.
	 * @param _villageWidth the new Width value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setVillageWidth(int _villageWidth) {
		villageWidth = _villageWidth;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Height property for Village.
	 * @return The vertical extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getVillageHeight() {
		return villageHeight;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Height property for Village.
	 * The vertical extent of the space.
	 * @param _villageHeight the new Height value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setVillageHeight(int _villageHeight) {
		villageHeight = _villageHeight;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Village property for TBmodel.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Scape getVillage() {
		return village;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Village property for TBmodel.
	 * 
	 * @param _village the new Village value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setVillage(Scape _village) {
		village = _village;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "TBmodel " + getUID();
		} else {
			return name;
		}
	}
}
