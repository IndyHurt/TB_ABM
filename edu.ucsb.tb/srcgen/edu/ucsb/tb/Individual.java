package edu.ucsb.tb;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.eclipse.core.runtime.IAdapterFactory;
import org.eclipse.amp.agf.IGraphicsAdapted;
import org.eclipse.amp.agf.IGraphicsAdapter;

import org.eclipse.swt.graphics.Color;
import org.eclipse.jface.viewers.IColorProvider;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Location;
import org.ascape.model.space.Singleton;
import org.ascape.runtime.NonGraphicRunner;
import org.ascape.util.Conditional;
import org.ascape.util.data.DataPoint;
import org.ascape.util.data.DataPointConcrete;
import org.ascape.util.vis.ColorFeature;
import org.ascape.util.vis.ColorFeatureConcrete;
import org.ascape.view.vis.ChartView;
import org.ascape.view.vis.GEFView;
import org.ascape.view.vis.GraphView;

import org.eclipse.amp.escape.runtime.extension.IAgentChild;
import org.eclipse.amp.escape.runtime.extension.IAgentChildProvider;

/**
 * <!-- begin-user-doc -->
 * Individual Java Implementation.
 * 
 * Generated by AMF for model: TBmodel.metaabm in project: edu.ucsb.tb 
 * <!-- end-user-doc -->
 * @generated
 */
public class Individual extends CellOccupant implements IAgentChildProvider {

	/**
	 * <!-- begin-user-doc -->
	 * Where the individual is in the disease cycle.  
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private TBStatusEnum tBStatus = TBStatusEnum.suseptible;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int tBInfectionsPerLifetime = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private TreatmentStatusEnum treatmentStatus = TreatmentStatusEnum.notInfected;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int daysUntilLatent = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int daysUntilRecovered = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int succesfulTreatments = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private HIVStatusEnum hIVStatus = HIVStatusEnum.hIVNegative;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private SmokingEnum smoking = SmokingEnum.nonSmoker;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private GenderEnum gender = GenderEnum.female;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int ageIndex = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int ageRange = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private ComplianceBehaviorEnum complianceBehavior = ComplianceBehaviorEnum.sometimesCompliant;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double bacterialLoad = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private HomeSearchEnum homeSearch = HomeSearchEnum.inProgress;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private NutritionEnum nutrition = NutritionEnum.nourished;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EconomicStatusEnum economicStatus = EconomicStatusEnum.notImprovished;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double bacterialClearingRate = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private boolean daytime = false;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private List<IAgentChild> children;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IAgentChild> getChildren() {
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Individual.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Individual() {

		children = new ArrayList<IAgentChild>();

	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			Individual clone = (Individual) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TBmodel getTBmodel() {
		return (TBmodel) getScape().getScape();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List getNetwork() {
		return Collections.emptyList();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void startSimulationAgentChild(int timeStep) {
		if (timeStep == getRoot().getRunner().getEarliestPeriod()) {
			for (IAgentChild tmp : children) {
				tmp.startSimulation(timeStep);
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void calculateTimeStep(int timeStep) {
		for (IAgentChild tmp : children) {
			tmp.calculate(timeStep);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Initial Placement Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initialPlacement() {
		final Object initialLocation = (Object) ((org.ascape.model.space.Discrete) getTBmodel()
				.getVillage().getSpace()).findRandomAvailable();
		if (initialLocation != null) {
			if (getHostScape() != ((Agent) initialLocation).getScape()) {
				die();
				getTBmodel().getIndividualScape().add(this);
			}
			moveTo(((HostCell) initialLocation));
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Initialize State Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializeState() {
		double tBStatusDraw = getRandom().nextDouble();
		double complianceCategoryDraw = getRandom().nextDouble();
		double ageDraw = getRandom().nextDouble();
		double povertyDraw = getRandom().nextDouble();
		if (tBStatusDraw < getTBmodel().getPInitialTBPositive()) {
			setTBStatus(TBStatusEnum.latent);
			double activeDraw = getRandom().nextDouble();
			if (activeDraw < getTBmodel().getPInitialActive()) {
				setTBStatus(TBStatusEnum.active);
				setTreatmentStatus(TreatmentStatusEnum.noTreatment);
			}
		}
		if (complianceCategoryDraw < getTBmodel().getPAlwaysCompliantCategory()) {
			setComplianceBehavior(ComplianceBehaviorEnum.alwaysCompliant);
		}
		if (complianceCategoryDraw >= getTBmodel()
				.getPAlwaysCompliantCategory()) {
			double pAlwaysCompliantCategoryAddPSometimesCompliantCategory = getTBmodel()
					.getPAlwaysCompliantCategory()
					+ getTBmodel().getPSometimesCompliantCategory();
			if (complianceCategoryDraw < pAlwaysCompliantCategoryAddPSometimesCompliantCategory) {
				setComplianceBehavior(ComplianceBehaviorEnum.sometimesCompliant);
			}
			if (complianceCategoryDraw >= pAlwaysCompliantCategoryAddPSometimesCompliantCategory) {
				setComplianceBehavior(ComplianceBehaviorEnum.neverCompliant);
			}
		}
		if (ageDraw >= getTBmodel().getPFemale()) {
			setGender(GenderEnum.male);
		} else {
			setGender(GenderEnum.female);
		}
		if (povertyDraw < getTBmodel().getPInitialImpoverished()) {
			setEconomicStatus(EconomicStatusEnum.impoverished);
		}
		if (povertyDraw < getTBmodel().getPInitialMalnourished()) {
			setNutrition(NutritionEnum.malnourished);
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Movement Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void movement() {
		if (getTBStatus() != TBStatusEnum.dead) {
			final Object neighboringCell = (Object) ((org.ascape.model.space.Discrete) getTBmodel()
					.getVillage().getSpace())
					.findRandomAvailableNeighbor(((org.ascape.model.CellOccupant) this)
							.getHostCell());
			if (neighboringCell != null) {
				if (getHostScape() != ((Agent) neighboringCell).getScape()) {
					die();
					getTBmodel().getIndividualScape().add(this);
				}
				moveTo(((HostCell) neighboringCell));
			}
			if (getTBmodel().isAvoidTBLocations()
					&& (getTBStatus() != TBStatusEnum.active && getTBStatus() != TBStatusEnum.dead)) {
				Conditional nearestTBPositiveCondition = new Conditional() {
					private static final long serialVersionUID = 1L;
					public boolean meetsCondition(Object nearestTBPositiveCell) {
						nearestTBPositiveCell = nearestTBPositiveCell;
						if (nearestTBPositiveCell instanceof MapLocation) {
							MapLocation nearestTBPositive = (MapLocation) nearestTBPositiveCell;
							return (nearestTBPositive.getTBBacterialPresense() > getTBmodel()
									.getTBAvoidanceThreshold());
						} else {
							return false;
						}
					}
				};
				final MapLocation nearestTBPositive = (MapLocation) ((org.ascape.model.space.Discrete) getTBmodel()
						.getVillage().getSpace()).findNearest(
						((org.ascape.model.CellOccupant) this).getHostCell(),
						nearestTBPositiveCondition, false, Double.MAX_VALUE);
				if (nearestTBPositive != null) {
					if (getHostScape() != ((Agent) nearestTBPositive)
							.getScape()) {
						die();
						getTBmodel().getIndividualScape().add(this);
					}
					moveAway(nearestTBPositive);
				}
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Place Movement Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void placeMovement() {
		if (getHomeSearch() == HomeSearchEnum.inProgress) {
			Conditional foundHouseCondition = new Conditional() {
				private static final long serialVersionUID = 1L;
				public boolean meetsCondition(Object foundHouseCell) {
					foundHouseCell = ((org.ascape.model.HostCell) foundHouseCell)
							.getOccupant();
					if (foundHouseCell instanceof House) {
						return true;
					} else {
						return false;
					}
				}
			};
			final Location foundHouseLocation = ((org.ascape.model.space.Discrete) getTBmodel()
					.getVillage().getSpace()).findNearest(
					((org.ascape.model.CellOccupant) this).getHostCell(),
					foundHouseCondition, false, Double.MAX_VALUE);
			if (foundHouseLocation != null) {
				final House foundHouse = (House) ((org.ascape.model.HostCell) foundHouseLocation)
						.getOccupant();
				if (foundHouse != null) {
					((org.ascape.model.space.Graph) getTBmodel().getHousing()
							.getSpace())
							.addNeighborSafe(this, foundHouse, true);
					setHomeSearch(HomeSearchEnum.complete);
				}
			}
			Conditional individualCopyCopyCondition = new Conditional() {
				private static final long serialVersionUID = 1L;
				public boolean meetsCondition(Object individualCopyCopyCell) {
					individualCopyCopyCell = ((org.ascape.model.HostCell) individualCopyCopyCell)
							.getOccupant();
					if (individualCopyCopyCell instanceof WorkLocation) {
						return true;
					} else {
						return false;
					}
				}
			};
			final Location individualCopyCopyLocation = ((org.ascape.model.space.Discrete) getTBmodel()
					.getVillage().getSpace()).findNearest(
					((org.ascape.model.CellOccupant) this).getHostCell(),
					individualCopyCopyCondition, false, Double.MAX_VALUE);
			if (individualCopyCopyLocation != null) {
				final WorkLocation individualCopyCopy = (WorkLocation) ((org.ascape.model.HostCell) individualCopyCopyLocation)
						.getOccupant();
				if (individualCopyCopy != null) {
					((org.ascape.model.space.Graph) getTBmodel()
							.getWorkplaces().getSpace()).addNeighborSafe(this,
							individualCopyCopy, true);
				}
			}
		}
		if (isDaytime() && getHomeSearch() == HomeSearchEnum.complete) {
			final WorkLocation individualCopyCopyCopy = (WorkLocation) ((org.ascape.model.space.Discrete) getTBmodel()
					.getWorkplaces().getSpace()).findRandomNeighbor(this);
			if (individualCopyCopyCopy != null) {
				final MapLocation individualCopyCopyCopyCopyCopy = (MapLocation) ((org.ascape.model.space.Discrete) individualCopyCopyCopy
						.getTBmodel().getVillage().getSpace())
						.findNearestAvailable(
								((org.ascape.model.CellOccupant) individualCopyCopyCopy)
										.getHostCell(), null, false,
								getTBmodel().getMaximumSeperation());
				if (individualCopyCopyCopyCopyCopy != null) {
					if (getHostScape() != ((Agent) individualCopyCopyCopyCopyCopy)
							.getScape()) {
						die();
						getTBmodel().getIndividualScape().add(this);
					}
					moveTo(individualCopyCopyCopyCopyCopy);
				}
			}
		}
		if (!isDaytime() && getHomeSearch() == HomeSearchEnum.complete) {
			final House targetHouse = (House) ((org.ascape.model.space.Discrete) getTBmodel()
					.getHousing().getSpace()).findRandomNeighbor(this);
			if (targetHouse != null) {
				final MapLocation individualCopyCopyCopyCopy = (MapLocation) ((org.ascape.model.space.Discrete) targetHouse
						.getTBmodel().getVillage().getSpace())
						.findNearestAvailable(
								((org.ascape.model.CellOccupant) targetHouse)
										.getHostCell(), null, false,
								getTBmodel().getMaximumSeperation());
				if (individualCopyCopyCopyCopy != null) {
					if (getHostScape() != ((Agent) individualCopyCopyCopyCopy)
							.getScape()) {
						die();
						getTBmodel().getIndividualScape().add(this);
					}
					moveTo(individualCopyCopyCopyCopy);
				}
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Disease Process Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void diseaseProcess() {
		if (getTreatmentStatus() != TreatmentStatusEnum.clinicalTreatment
				&& getTBStatus() == TBStatusEnum.latent) {
			double latenttoActiveDraw = getRandom().nextDouble();
			double pActiveTransitionLatent = pActiveTransitionLatent();
			double pActiveTransitionLatentDividePeriodsinYear = pActiveTransitionLatent / 365;
			if (latenttoActiveDraw < pActiveTransitionLatentDividePeriodsinYear) {
				setTBStatus(TBStatusEnum.active);
			}
		}
		if (getTreatmentStatus() == TreatmentStatusEnum.clinicalTreatment
				&& getTBStatus() == TBStatusEnum.latent) {
			int daysUntilLatentSubtractUnit = getDaysUntilLatent() - 1;
			int daysUntilRecoveredSubtractUnit = getDaysUntilRecovered() - 1;
			setDaysUntilLatent(daysUntilLatentSubtractUnit);
			if (getDaysUntilLatent() == 0) {
				setTBStatus(TBStatusEnum.latent);
			}
			setDaysUntilRecovered(daysUntilRecoveredSubtractUnit);
			if (getDaysUntilRecovered() == 0) {
				setTBStatus(TBStatusEnum.suseptible);
			}
		}
		if (getTBStatus() == TBStatusEnum.active) {
			final Location individualLocation = this;
			if (individualLocation != null) {
				final MapLocation individual = (MapLocation) ((org.ascape.model.CellOccupant) individualLocation)
						.getHostCell();
				if (individual != null) {
					double tBBacterialPresenseAddBacterialEmissionRate = individual
							.getTBBacterialPresense()
							+ individual.getTBmodel()
									.getBacterialEmissionRate();
					double minimum_TBBacterialPresenseAddBacterialEmissionRateActiveBacterialTransmissionRate_ = java.lang.Math
							.min(tBBacterialPresenseAddBacterialEmissionRate,
									getTBmodel()
											.getActiveBacterialTransmissionRate());
					individual.setTBBacterialPresense(getTBmodel()
							.getActiveBacterialTransmissionRate());
				}
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Calculate P Active Transition Latent.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double pActiveTransitionLatent() {
		double pActiveTransitionLatentFactor = 0.0;

		pActiveTransitionLatentFactor = getTBmodel()
				.getPActiveTransitionLatentFactorBase();
		switch (getHIVStatus()) {
			case hIVNegative :
				pActiveTransitionLatentFactor = pActiveTransitionLatentFactor
						+ getTBmodel()
								.getPActiveTransitionLatentHIVNegativeFactor();
				break;
			case hIVPositive :
				pActiveTransitionLatentFactor = pActiveTransitionLatentFactor
						+ getTBmodel()
								.getPActiveTransitionLatentHIVPositiveFactor();
				break;
		}
		switch (getSmoking()) {
			case nonSmoker :
				pActiveTransitionLatentFactor = pActiveTransitionLatentFactor
						+ getTBmodel()
								.getPActiveTransitionLatentNonSmokerFactor();
				break;
			case smoker :
				pActiveTransitionLatentFactor = pActiveTransitionLatentFactor
						+ getTBmodel().getPActiveTransitionLatentSmokerFactor();
				break;
		}
		switch (getNutrition()) {
			case nourished :
				pActiveTransitionLatentFactor = pActiveTransitionLatentFactor
						+ getTBmodel()
								.getPActiveTransitionLatentNourishedFactor();
				break;
			case malnourished :
				pActiveTransitionLatentFactor = pActiveTransitionLatentFactor
						+ getTBmodel()
								.getPActiveTransitionLatentMalnourishedFactor();
				break;
		}
		switch (getEconomicStatus()) {
			case notImprovished :
				pActiveTransitionLatentFactor = pActiveTransitionLatentFactor
						+ getTBmodel()
								.getPActiveTransitionLatentNotImprovishedFactor();
				break;
			case impoverished :
				pActiveTransitionLatentFactor = pActiveTransitionLatentFactor
						+ getTBmodel()
								.getPActiveTransitionLatentImpoverishedFactor();
				break;
		}
		return pActiveTransitionLatentFactor;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Watch for changes in TB Status.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void watchTBStatus() {
		if (getTBStatus() == TBStatusEnum.latent) {
			setTreatmentStatus(TreatmentStatusEnum.noTreatment);
			int incrementTBInfectionsPerLifetime = getTBInfectionsPerLifetime() + 1;
			setTBInfectionsPerLifetime(incrementTBInfectionsPerLifetime);
		}
		if (getTBStatus() == TBStatusEnum.suseptible) {
			setTreatmentStatus(TreatmentStatusEnum.notInfected);
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Detection Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void detection() {
		if (getTreatmentStatus() == TreatmentStatusEnum.noTreatment) {
			double detectionDraw = getRandom().nextDouble();
			if (getComplianceBehavior() == ComplianceBehaviorEnum.alwaysCompliant
					&& detectionDraw < getTBmodel().getPDetection()) {
				setTreatmentStatus(TreatmentStatusEnum.clinicalTreatment);
			}
			if (getComplianceBehavior() == ComplianceBehaviorEnum.neverCompliant
					&& detectionDraw < getTBmodel().getPDetection()) {
				setTreatmentStatus(TreatmentStatusEnum.nonCompliantClinicalTreatment);
			}
			if (getComplianceBehavior() == ComplianceBehaviorEnum.sometimesCompliant
					&& detectionDraw < getTBmodel().getPDetection()) {
				double complianceDraw = getRandom().nextDouble();
				if (complianceDraw >= getTBmodel()
						.getPSomtimesCompliantwillComply()) {
					setTreatmentStatus(TreatmentStatusEnum.nonCompliantClinicalTreatment);
				}
				if (complianceDraw < getTBmodel()
						.getPSomtimesCompliantwillComply()) {
					setTreatmentStatus(TreatmentStatusEnum.clinicalTreatment);
				}
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Watch for changes in Treatment Status.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void watchTreatmentStatus() {
		if (getTreatmentStatus() == TreatmentStatusEnum.clinicalTreatment) {
			int drawDaysuntilRecovered = randomInRange(getTBmodel()
					.getMinDaysClinicalTreatmenttoRecovered(), getTBmodel()
					.getMaxDaysClinicalTreatmenttoRecovered());
			if (getTBStatus() == TBStatusEnum.active
					&& getTreatmentStatus() == TreatmentStatusEnum.clinicalTreatment) {
				int drawDaysuntilLatent = randomInRange(getTBmodel()
						.getMinDaysClinicalTreatmenttoLatent(), getTBmodel()
						.getMaxDaysClinicalTreatmenttoLatent());
				setDaysUntilLatent(drawDaysuntilLatent);
			}
			setDaysUntilRecovered(drawDaysuntilRecovered);
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Derive Succesful Treatments.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getSuccesfulTreatments() {
		if (getTBStatus() != TBStatusEnum.suseptible) {
			return getTBInfectionsPerLifetime() - 1;
		}
		if (getTBStatus() == TBStatusEnum.suseptible) {
			return getTBInfectionsPerLifetime() - 0;
		}
		return 0;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Watch for changes in Gender.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void watchGender() {
		if (getGender() == GenderEnum.male) {
			int randomWeighted_AgeDistributionMale_ = randomWeighted(getTBmodel()
					.getAgeDistributionMale());
			setAgeIndex(randomWeighted_AgeDistributionMale_);
		}
		if (getGender() == GenderEnum.female) {
			int randomWeighted_AgeDistributionFemale_ = randomWeighted(getTBmodel()
					.getAgeDistributionFemale());
			setAgeIndex(randomWeighted_AgeDistributionFemale_);
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Derive Age Range.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getAgeRange() {
		return getAgeIndex() * 5;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Watch for changes in Age Index.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void watchAgeIndex() {
		double hIVDraw = getRandom().nextDouble();
		if (getGender() == GenderEnum.male) {
			double item_HIVPrevalenceMalebyAgeIndexAgeIndex_ = getTBmodel()
					.getHIVPrevalenceMalebyAgeIndex()[getAgeIndex()];
			if (hIVDraw < item_HIVPrevalenceMalebyAgeIndexAgeIndex_) {
				setHIVStatus(HIVStatusEnum.hIVPositive);
			}
		}
		if (getGender() == GenderEnum.male) {
			double item_SmokingPrevelanceMalebyAgeIndexAgeIndex_ = getTBmodel()
					.getSmokingPrevelanceMalebyAgeIndex()[getAgeIndex()];
			double smokingDraw = getRandom().nextDouble();
			if (smokingDraw < item_SmokingPrevelanceMalebyAgeIndexAgeIndex_) {
				setSmoking(SmokingEnum.smoker);
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Immune Response Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void immuneResponse() {
		if (getTBStatus() == TBStatusEnum.suseptible) {
			double bacterialLoadSubtractBacterialClearingRate = getBacterialLoad()
					- getBacterialClearingRate();
			double maximum_BacterialLoadSubtractBacterialClearingRateZero_ = java.lang.Math
					.max(bacterialLoadSubtractBacterialClearingRate, 0);
			setBacterialLoad(maximum_BacterialLoadSubtractBacterialClearingRateZero_);
			if (getBacterialLoad() > getTBmodel()
					.getBacterialLoadInfectionThreshold()) {
				setTBStatus(TBStatusEnum.latent);
			}
		}
		if (getTBStatus() != TBStatusEnum.suseptible) {
			setBacterialLoad(getTBmodel().getBacterialLoadInfectionThreshold());
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Death Process Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void deathProcess() {
		if (getTBStatus() == TBStatusEnum.active) {
			double randomUnit = getRandom().nextDouble();
			double tBActiveDeathRateperYearDividePeriodsinYear = getTBmodel()
					.getTBActiveDeathRateperYear() / 365;
			if (randomUnit < tBActiveDeathRateperYearDividePeriodsinYear) {
				setTBStatus(TBStatusEnum.dead);
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Acquire Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void acquire() {
		final Location potentialDiseaseLocationLocation = this;
		if (potentialDiseaseLocationLocation != null) {
			final MapLocation potentialDiseaseLocation = (MapLocation) ((org.ascape.model.CellOccupant) potentialDiseaseLocationLocation)
					.getHostCell();
			if (potentialDiseaseLocation != null) {
				double bacterialLoadAddTBBacterialPresense = getBacterialLoad()
						+ potentialDiseaseLocation.getTBBacterialPresense();
				setBacterialLoad(bacterialLoadAddTBBacterialPresense);
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Derive Bacterial Clearing Rate.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getBacterialClearingRate() {
		double immuneClearing = immuneClearing();
		return immuneClearing + 0;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Calculate Immune Clearing.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double immuneClearing() {
		double immuneClearingFactor = 0.0;

		immuneClearingFactor = getTBmodel().getImmuneClearingFactorBase();
		switch (getHIVStatus()) {
			case hIVNegative :
				immuneClearingFactor = immuneClearingFactor
						+ getTBmodel().getImmuneClearingHIVNegativeFactor();
				break;
			case hIVPositive :
				immuneClearingFactor = immuneClearingFactor
						+ getTBmodel().getImmuneClearingHIVPositiveFactor();
				break;
		}
		switch (getSmoking()) {
			case nonSmoker :
				immuneClearingFactor = immuneClearingFactor
						+ getTBmodel().getImmuneClearingNonSmokerFactor();
				break;
			case smoker :
				immuneClearingFactor = immuneClearingFactor
						+ getTBmodel().getImmuneClearingSmokerFactor();
				break;
		}
		switch (getNutrition()) {
			case nourished :
				immuneClearingFactor = immuneClearingFactor
						+ getTBmodel().getImmuneClearingNourishedFactor();
				break;
			case malnourished :
				immuneClearingFactor = immuneClearingFactor
						+ getTBmodel().getImmuneClearingMalnourishedFactor();
				break;
		}
		switch (getEconomicStatus()) {
			case notImprovished :
				immuneClearingFactor = immuneClearingFactor
						+ getTBmodel().getImmuneClearingNotImprovishedFactor();
				break;
			case impoverished :
				immuneClearingFactor = immuneClearingFactor
						+ getTBmodel().getImmuneClearingImpoverishedFactor();
				break;
		}
		return immuneClearingFactor;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Derive Daytime.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isDaytime() {
		int now = getScape().getPeriod();
		int nowModuloPeriodsinDay = now % getTBmodel().getPeriodsinDay();
		return nowModuloPeriodsinDay == 0;
	}
	/**
	 * <!-- begin-user-doc -->
	 * An indexed value weighted against a probability distribution. The total probability must sum to 1.0. For example, an input of {.1,.2,.7} under a uniform distribution would would have 10% probability of producing "0" , 20%  for "1" and 70% for "2". This function can then be used with Item to return a biased result from another list.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int randomWeighted(double[] weights) {
		double scalarDraw = getRandom().nextDouble();
		double currentPortion = 0.0;
		for (int i = 0; currentPortion <= 1.0 && i < weights.length; i++) {
			currentPortion += weights[i];
			if (scalarDraw < currentPortion) {
				return i;
			}
		}
		System.out.println("WARNING: Weights do not add to 1.0: "
				+ currentPortion + ". Using final index value.");
		return weights.length - 1;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the TB Status property for Individual.
	 * @return Where the individual is in the disease cycle.  
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TBStatusEnum getTBStatus() {
		return tBStatus;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the TB Status property for Individual.
	 * Where the individual is in the disease cycle.  
	 * @param _tBStatus the new TB Status value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTBStatus(TBStatusEnum _tBStatus) {
		tBStatus = _tBStatus;
		watchTBStatus();
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the TB Infections Per Lifetime property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getTBInfectionsPerLifetime() {
		return tBInfectionsPerLifetime;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the TB Infections Per Lifetime property for Individual.
	 * 
	 * @param _tBInfectionsPerLifetime the new TB Infections Per Lifetime value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTBInfectionsPerLifetime(int _tBInfectionsPerLifetime) {
		tBInfectionsPerLifetime = _tBInfectionsPerLifetime;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Treatment Status property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TreatmentStatusEnum getTreatmentStatus() {
		return treatmentStatus;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Treatment Status property for Individual.
	 * 
	 * @param _treatmentStatus the new Treatment Status value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTreatmentStatus(TreatmentStatusEnum _treatmentStatus) {
		treatmentStatus = _treatmentStatus;
		watchTreatmentStatus();
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Days Until Latent property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getDaysUntilLatent() {
		return daysUntilLatent;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Days Until Latent property for Individual.
	 * 
	 * @param _daysUntilLatent the new Days Until Latent value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDaysUntilLatent(int _daysUntilLatent) {
		daysUntilLatent = _daysUntilLatent;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Days Until Recovered property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getDaysUntilRecovered() {
		return daysUntilRecovered;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Days Until Recovered property for Individual.
	 * 
	 * @param _daysUntilRecovered the new Days Until Recovered value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDaysUntilRecovered(int _daysUntilRecovered) {
		daysUntilRecovered = _daysUntilRecovered;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the HIV Status property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HIVStatusEnum getHIVStatus() {
		return hIVStatus;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the HIV Status property for Individual.
	 * 
	 * @param _hIVStatus the new HIV Status value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHIVStatus(HIVStatusEnum _hIVStatus) {
		hIVStatus = _hIVStatus;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Smoking property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SmokingEnum getSmoking() {
		return smoking;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Smoking property for Individual.
	 * 
	 * @param _smoking the new Smoking value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSmoking(SmokingEnum _smoking) {
		smoking = _smoking;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Gender property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GenderEnum getGender() {
		return gender;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Gender property for Individual.
	 * 
	 * @param _gender the new Gender value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setGender(GenderEnum _gender) {
		gender = _gender;
		watchGender();
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Age Index property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getAgeIndex() {
		return ageIndex;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Age Index property for Individual.
	 * 
	 * @param _ageIndex the new Age Index value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setAgeIndex(int _ageIndex) {
		ageIndex = _ageIndex;
		watchAgeIndex();
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Compliance Behavior property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComplianceBehaviorEnum getComplianceBehavior() {
		return complianceBehavior;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Compliance Behavior property for Individual.
	 * 
	 * @param _complianceBehavior the new Compliance Behavior value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setComplianceBehavior(ComplianceBehaviorEnum _complianceBehavior) {
		complianceBehavior = _complianceBehavior;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Bacterial Load property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getBacterialLoad() {
		return bacterialLoad;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Bacterial Load property for Individual.
	 * 
	 * @param _bacterialLoad the new Bacterial Load value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setBacterialLoad(double _bacterialLoad) {
		bacterialLoad = _bacterialLoad;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Home Search property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HomeSearchEnum getHomeSearch() {
		return homeSearch;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Home Search property for Individual.
	 * 
	 * @param _homeSearch the new Home Search value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHomeSearch(HomeSearchEnum _homeSearch) {
		homeSearch = _homeSearch;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Nutrition property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NutritionEnum getNutrition() {
		return nutrition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Nutrition property for Individual.
	 * 
	 * @param _nutrition the new Nutrition value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNutrition(NutritionEnum _nutrition) {
		nutrition = _nutrition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Economic Status property for Individual.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EconomicStatusEnum getEconomicStatus() {
		return economicStatus;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Economic Status property for Individual.
	 * 
	 * @param _economicStatus the new Economic Status value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setEconomicStatus(EconomicStatusEnum _economicStatus) {
		economicStatus = _economicStatus;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "Individual " + getUID();
		} else {
			return name;
		}
	}
}
